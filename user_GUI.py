# Importa o m√≥dulo principal do Tkinter para criar interfaces gr√°ficas
import tkinter as tk
# Importa o m√≥dulo ttkbootstrap, que melhora os widgets do Tkinter com temas modernos
import ttkbootstrap as ttk

# Cria a janela principal com o tema \*darkly\*
satisfaction = ttk.Window(themename="darkly")
# Define o tamanho da janela: 800 pixels de largura e 650 pixels de altura
satisfaction.geometry("800x650")
# Define o t√≠tulo da janela que aparecer√° na barra de t√≠tulo
satisfaction.title("Review User")

# Cria o \*frame_review\*, que ser√° a tela inicial onde o usu√°rio escolhe a avalia√ß√£o
frame_review = ttk.Frame(satisfaction)
# Posiciona o frame na linha 0, coluna 0, ocupando todo o espa√ßo dispon√≠vel (nsew = norte, sul, leste, oeste)
frame_review.grid(row=0, column=0, sticky="nsew")

# Cria o \*frame_feedback\*, a tela onde o usu√°rio poder√° digitar sugest√µes de melhoria
frame_feedback = ttk.Frame(satisfaction)
# Posiciona o frame_feedback na mesma posi√ß√£o que o frame_review para facilitar a troca de telas
frame_feedback.grid(row=0, column=0, sticky="nsew")

# Fun√ß√£o \*show_frame\* que recebe um frame e chama o m√©todo tkraise() para mostr√°-lo na tela
def show_frame(frame):
    frame.tkraise()  # Traz o \*frame\* para o topo, tornando-o vis√≠vel

# Fun√ß√£o \*change_window\* que troca a tela para o frame_feedback, chamando show_frame
def change_window():
    show_frame(frame_feedback)

# Cria um objeto Style para personalizar o estilo dos widgets
style = ttk.Style()
# Configura um \*estilo customizado\* chamado "Custom.TButton" com a fonte Arial tamanho 20
style.configure("Custom.TButton", font=("Arial", 20))

# ==================== Conte√∫do do \*frame_review\* ====================

# Cria um r√≥tulo (label) com o t√≠tulo da tela de avalia√ß√£o
tittle = ttk.Label(frame_review, text="Deixe aqui a sua avalia√ß√£o!", font=("Helvetica", 34))
# Posiciona o r√≥tulo com um espa√ßamento vertical (pady) de 20 pixels
tittle.pack(pady=20)

# Cria um bot√£o \*Great\* com o estilo \*success\*
great_review = ttk.Button(
    frame_review,                   # Define que o bot√£o ficar√° dentro do \*frame_review\*
    text="üòÉ      Great",           # Texto exibido no bot√£o
    bootstyle="success",            # Aplica o estilo \*success\* definido pelo ttkbootstrap
    width=50,                       # Define a largura do bot√£o
    padding=20                      # Define o espa√ßamento interno do bot√£o (padding)
)
# Posiciona o bot√£o garantindo um espa√ßamento vertical de 10 pixels
great_review.pack(pady=10)

# Cria um bot√£o \*Good\* que ao ser clicado chama a fun√ß√£o change_window para trocar a tela
good_review = ttk.Button(
    frame_review,
    text="üôÇ       Good",
    bootstyle="info",               # Estilo \*info\*
    width=50,
    padding=20,
    command=change_window          # Associa a a√ß√£o de mudar a tela ao clicar no bot√£o
)
good_review.pack(pady=10)

# Cria o bot√£o \*Regular\* com estilo \*warning\*, tamb√©m configurado para trocar a tela
regular_review = ttk.Button(
    frame_review,
    text="üòê    Regular",
    bootstyle="warning",            # Estilo \*warning\*
    width=50,
    padding=20,
    command=change_window
)
regular_review.pack(pady=10)

# Cria o bot√£o \*Bad\* com o estilo \*danger\* que tamb√©m chama change_window ao clicar
bad_review = ttk.Button(
    frame_review,
    text="üòñ      Bad",
    bootstyle="danger",             # Estilo \*danger\*
    width=50,
    padding=20,
    command=change_window
)
bad_review.pack(pady=10)

# Configura√ß√£o opcional para definir estilos espec√≠ficos com fonte tamanho 25 para cada tipo de bot√£o
satisfaction.style.configure('success.TButton', font=(None, 25))
satisfaction.style.configure('info.TButton', font=(None, 25))
satisfaction.style.configure('warning.TButton', font=(None, 25))
satisfaction.style.configure('danger.TButton', font=(None, 25))

# ==================== Conte√∫do do \*frame_feedback\* ====================

# Cria um r√≥tulo para o feedback solicitando melhorias
feedback_label = ttk.Label(frame_feedback, text="O que pode melhorar?", font=("Helvetica", 24))
# Posiciona o r√≥tulo com um espa√ßamento vertical de 20 pixels
feedback_label.pack(pady=20)

# Cria uma caixa de texto onde o usu√°rio pode inserir seu feedback
text_feedback = tk.Text(frame_feedback, width=50, height=10)
# Posiciona a caixa de texto com um espa√ßamento vertical de 10 pixels
text_feedback.pack(pady=10)

# Cria o bot√£o \*Voltar\* que retorna para a tela de avalia√ß√£o (\*frame_review\*)
back_button = ttk.Button(
    frame_feedback,
    text="Voltar",
    bootstyle="info",               # Estilo \*info\*
    width=50,
    padding=20,
    # Define uma fun√ß√£o lambda que chama show_frame para exibir o \*frame_review\*
    command=lambda: show_frame(frame_review)
)
back_button.pack(pady=10)

# Inicialmente, exibe o \*frame_review\* para que a tela de avalia√ß√£o seja a primeira a ser vista
show_frame(frame_review)

# Inicia o loop principal da interface, permitindo que a janela permane√ßa aberta e interativa
satisfaction.mainloop()